@using Common
@using Serilog

<style>
    .selected-palette {
    border-color: black !important;
    border-width: 3px !important;
    border-radius: 2px;
    }
</style>

@if(!IsLoading && Colors?.Length == 3)
{
    <div class="selected-colors d-flex mt-1">
        <div class="background selected-color-cell no-select @(SelectedPaletteIndex == 0 ? "selected-palette" : "")"
        @onclick="() => OnPaletteColorClicked(0)"></div>

        @for (int i = 0; i < 3; i++)
        {
            var color = Colors[i];
            var index = i + 1;
            var selectedClass = SelectedPaletteIndex == index ? "selected-palette" : "";

            <div class="selected-color-cell no-select @(selectedClass)"
            @onclick="() => OnPaletteColorClicked(index)"
            style="background-color:@(color.ColorHexString ?? "#ffffff")"></div>
        }
    </div>
}


@code {
    private NesColor? _selectedNesColor = null; 
    protected bool IsLoading { get; set; } = false;

    private int _selectedPaletteIndex = 0; 
    [Parameter]
    public int SelectedPaletteIndex
    {
        get=> _selectedPaletteIndex;
        set
        {
            if (value != _selectedPaletteIndex)
            {
                Log.Information($"{nameof(_ColorPalette)}:SelectedPaletteIndex: new index selected {value}");
                _selectedPaletteIndex = value;
                _ = SelectedPaletteIndexChanged.InvokeAsync(value);

                switch(_selectedPaletteIndex)
                {
                    case 0:
                        SelectedNesColor = null;    
                        break; 
                    case 1:
                        SelectedNesColor = Slot1Color;
                        StateHasChanged(); 
                        break; 
                    case 2:
                        SelectedNesColor = Slot2Color;
                        break; 
                    case 3:
                        SelectedNesColor = Slot3Color;
                        break; 
                }
            }
        }
    }
    [Parameter]
    public EventCallback<int> SelectedPaletteIndexChanged { get; set; }

    [Parameter]
    public NesColor? SelectedNesColor
    {
        get => _selectedNesColor;
        set
        {
            if (value != _selectedNesColor)
            {
                _selectedNesColor = value; 
                SelectedNesColorChanged
                .InvokeAsync(_selectedNesColor)
                .ContinueWith((t)=>
                {
                    if (value != null)
                    {
                        Colors[SelectedPaletteIndex - 1] = value;

                        switch (SelectedPaletteIndex)
                        {
                            case 1:
                                Slot1ColorChanged.InvokeAsync(value);
                                break;
                            case 2:
                                Slot2ColorChanged.InvokeAsync(value);
                                break;
                            case 3:
                                Slot3ColorChanged.InvokeAsync(value);
                                break;
                        }
                    }
                }); 
            }
        }
    }

    [Parameter]
    public EventCallback<NesColor?> SelectedNesColorChanged { get; set; }

    [Parameter]
    public NesColor? Slot1Color
    {
        get => Colors[0];
        set
        {
            GenericSet(0, value, Slot3ColorChanged);
        }
    }

    [Parameter]
    public EventCallback<NesColor?> Slot1ColorChanged { get; set; }

    [Parameter]
    public NesColor? Slot2Color
    {
        get => Colors[1];
        set
        {
            GenericSet(1, value, Slot3ColorChanged);
        }
    }

    [Parameter]
    public EventCallback<NesColor?> Slot2ColorChanged { get; set; }

    [Parameter]
    public NesColor? Slot3Color
    {
        get => Colors[2];
        set
        {
            GenericSet(2, value, Slot3ColorChanged); 
        }
    }

    [Parameter]
    public EventCallback<NesColor?> Slot3ColorChanged { get; set; }

    private void GenericSet(int colorIndex, NesColor value, EventCallback<NesColor> slotChangedCallback)
    {
        if (value != null && Colors?.Length == 3 && value != Colors[colorIndex])
        {
            Colors[colorIndex] = value;

            _ = slotChangedCallback.InvokeAsync(value);

            if (SelectedPaletteIndex == colorIndex + 1)
            {
                SelectedNesColor = value;
                _ = SelectedNesColorChanged.InvokeAsync(value);
            }
        }
    }

    private NesColor[] Colors { get; set; } = [new(NesColorsUtils.FullNesPalette[0]),
            new(NesColorsUtils.FullNesPalette[1]), new(NesColorsUtils.FullNesPalette[2])];


    protected void OnPaletteColorClicked(int index)
    {
        if (SelectedPaletteIndex != index)
        {
            SelectedPaletteIndex = index;
            
            SelectedNesColorChanged.InvokeAsync(_selectedNesColor);
        }

        StateHasChanged(); 
    }
}
