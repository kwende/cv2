@page "/"

@inject ILogger<Home> _logger; 
@inject IJSRuntime _jsRuntime; 

@page "/sprite-editor"
@using Common
@using MudBlazor
@using CV2WebAssembly.Pages

<MudAppBar Color="Color.Primary" Elevation="1">
    <MudText Typo="Typo.h6">NES Sprite Editor</MudText>
</MudAppBar>



<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12 mb-4">
            <MudText Typo="Typo.h6">1) Upload CV2 ROM</MudText>
            <_RomUpload FileUpload="UploadFiles"></_RomUpload>
            @if (RomLoaded)
            {
                <MudButton OnClick="OnDownloadClick">Download</MudButton>
            }
        </div>
    </div>
    @if (Loading)
    {
        <div class="row">
            <div class="col-12" style="height:500px;">
                <div class="spinner">
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                </div>
            </div>
        </div>
    }
    else if(RomLoaded)
    {
        <div class="row">
            <!-- Palette Panel -->
            <div class="col-md-5">
                <MudPaper Class="p-3">
                    <MudText Typo="Typo.h6">2) Choose 4 colors from palette</MudText>

                    <_NesColors @bind-SelectedColor="@SelectedNesColor"></_NesColors>

                    <MudText Typo="Typo.h6" Class="mt-4">3) Choose from palette</MudText>

                    <_ColorPalette @bind-Slot1Color="Slot1NesColor"
                                   @bind-Slot2Color="Slot2NesColor"
                                   @bind-Slot3Color="Slot3NesColor"
                                   @bind-SelectedNesColor="@SelectedNesColor">
                    </_ColorPalette>

                </MudPaper>
            </div>

            <!-- Canvas Panel -->
            <_SpriteEditor Saved="OnSpriteSaved" Sprite="@SelectedSprite"
                           Slot1Color="Slot1NesColor"
                           Slot2Color="Slot2NesColor"
                           Slot3Color="Slot3NesColor"
                           SelectedNesColor="@SelectedNesColor">

            </_SpriteEditor>

        </div>
        <div class="row mt-4 d-flex gap-1">
            @foreach (var sprite in Sprites)
            {
                <_SpritePreview SpriteClicked="OnSpritePreviewClicked"
                                Sprite="@sprite"
                                Slot1Color="Slot1NesColor"
                                Slot2Color="Slot2NesColor"
                                Slot3Color="Slot3NesColor">
                </_SpritePreview>
            }
        </div>
    }
 
</div>


@code {

    private SpriteSheet? _simonSpriteSheet = null; 
    private NesROM? _rom = null; 

    protected bool RomLoaded { get; set; } = false; 
    protected bool Loading { get; set; } = false; 
    protected ISprite? SelectedSprite { get; set; } = null; 
    protected NesColor? SelectedNesColor { get; set; } = null; 

    protected NesColor? Slot1NesColor {get;set;} = null; 
    protected NesColor? Slot2NesColor {get;set;} = null;
    protected NesColor? Slot3NesColor { get; set; } = null;

    private int SpriteCount = 18;
    protected List<ISprite> Sprites { get; set; } = new();

    protected MemoryStream? _nesGameBytes = null;
    private IJSObjectReference? _jsObjectReference = null; 

    protected async Task OnSpritePreviewClicked(ISprite sprite)
    {
        SelectedSprite = sprite; 
    }

    protected void LoadPalette(int[] palette)
    {
        Slot1NesColor = NesColorsUtils.NesColorIndexToNesColor(palette[0]);
        Slot2NesColor = NesColorsUtils.NesColorIndexToNesColor(palette[1]);
        Slot3NesColor = NesColorsUtils.NesColorIndexToNesColor(palette[2]);
    }

    protected async Task OnSpriteSaved(ISprite sprite)
    {
        var spritesToSave = sprite.Flatten(true); 
        // todo: make something which consumes individual sprites, not just whole sheets. 
        var sheets = await _rom.GetSpriteSheets(true);
        foreach (var spriteToSave in spritesToSave)
        {
            var sheet = sheets[spriteToSave.SheetNumber]; 
            sheet.Sprites[spriteToSave.SpriteIndex] = spriteToSave; 
        }
        await _rom.SaveSpriteSheets(sheets); 
    }

    protected async Task OnDownloadClick()
    {
        if (_jsObjectReference != null)
        {
            using var memoryStream = new MemoryStream();
            await _rom.SaveToStream(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin); 
            using var streamRef = new DotNetStreamReference(stream: memoryStream);

            await _jsObjectReference.InvokeVoidAsync("downloadFile", "cv2-edited.nes", streamRef);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(_jsObjectReference == null)
        {
            _jsObjectReference = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/Home.razor.js");
        }
    }

    protected async Task UploadFiles(IBrowserFile file)
    {
        Loading = true; 

        // just gives the spinner a second on super fast loads. 
        // otherwise things look a tad jumpy. 
        await Task.Delay(TimeSpan.FromSeconds(1)); 

        _nesGameBytes = new MemoryStream(275_000);
        await file.OpenReadStream().CopyToAsync(_nesGameBytes);
        _rom = new NesROM(); 
        await _rom.Load(_nesGameBytes);

        var sheets = await _rom.GetSpriteSheets(true);

        var simonSheet1 = sheets[1];

        // for demo of loading simon. 
        var sprite1 = simonSheet1.Sprites[1];
        var sprite2 = simonSheet1.Sprites[2];

        LoadPalette(Constants.SimonPalette); 

        SelectedSprite = CompositeSprite.Create([sprite1, sprite2], SpriteOrientationEnum.Horizontal);

        Sprites.Clear(); 

        for (int i = 0; i < SpriteCount; i++)
        {
            var spriteA = simonSheet1.Sprites[i * 2 + 1];
            var spriteB = simonSheet1.Sprites[i * 2 + 2];

            Sprites.Add(
                CompositeSprite.Create([spriteA, spriteB], SpriteOrientationEnum.Horizontal));
        }

        RomLoaded = true; 
        Loading = false; 
    }
}



<style>

    .spinner {
        position: absolute;
        height: 100vh;
        width: 100%;
        top: 50%;
        left: 50%;
        margin-left: -50px;
        margin-top: -50px;
        background: url(/link/to/your/image);
        background-size: 100%;
    }

    /* Palette grid: 16 columns */
    .palette-grid {
        display: grid;
        grid-template-columns: repeat(16, 24px);
        grid-gap: 4px;
    }

    .color-cell {
        width: 24px;
        height: 24px;
        border: 1px solid #444;
        cursor: pointer;
    }

    .no-select {
        /* Prevent any selection or caret showing up */
        user-select: none; /* standard */
        -webkit-user-select: none; /* Safari/Chrome */
        -ms-user-select: none; /* IE/Edge */
        /* Hide the blinking caret if focus does land there */
        caret-color: transparent;
        /* Remove the focus outline so nothing shows when you click */
        outline: none;
    }

    /* Selected palette slots */
    .selected-colors .selected-color-cell {
        width: 40px;
        height: 40px;
        border: 1px solid #444;
        margin-right: 8px;
        cursor: pointer;
    }


    /* Sprite canvas: 16×16 pixels */
    .sprite-canvas {
        display: grid;
        grid-template-columns: repeat(16, 20px);
        grid-template-rows: repeat(16, 20px);
    }

    .pixel {
        width: 20px;
        height: 20px;
        border: 1px solid #ccc;
        cursor: pointer;
    }

    .background {
        background: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' preserveAspectRatio='none' viewBox='0 0 100 100'><path d='M100 0 L0 100 ' stroke='black' stroke-width='1'/><path d='M0 0 L100 100 ' stroke='black' stroke-width='1'/></svg>");
        background-repeat: no-repeat;
        background-position: center center;
        background-size: 100% 100%, auto;
    }
</style>