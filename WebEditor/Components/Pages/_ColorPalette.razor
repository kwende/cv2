@using Common

<style>
    .selected-palette {
        border-color: black !important;
        border-width: 3px !important;
        border-radius: 2px;
    }
</style>

@if(!IsLoading)
{
    <div class="selected-colors d-flex mt-1">
        <div class="background selected-color-cell no-select @(_selectedNesColorIndex == 0 ? "selected-palette" : "")"
             @onclick="() => OnPaletteColorClicked(null, 0)"></div>

        @for (int i = 0; i < 3; i++)
        {
            var color = Colors[i];
            var index = i + 1;
            var selectedClass = _selectedNesColorIndex == index ? "selected-palette" : "";

            <div class="selected-color-cell no-select @(selectedClass)"
                 @onclick="() => OnPaletteColorClicked(color, index)"
                 style="background-color:@(color.ColorHexCode ?? "#ffffff")"></div>
        }
    </div>
}


@code {
    private int _selectedNesColorIndex = 0; 
    private NesColor? _selectedNesColor = null; 
    protected bool IsLoading { get; set; } = false; 

    [Parameter]
    public NesColor? SelectedNesColor
    {
        get => _selectedNesColor;
        set
        {
            bool changed = false; 
            if (value != null && _selectedNesColorIndex == 0)
            {
                _selectedNesColorIndex = 1; 
                _selectedNesColor = value; 
                Colors[_selectedNesColorIndex - 1] = _selectedNesColor; 
                changed = true; 
            }
            else if (value != null && _selectedNesColorIndex > 0 && value != _selectedNesColor)
            {
                var slotNumber = _selectedNesColorIndex - 1; 
                _selectedNesColor = value; 
                Colors[slotNumber] = value;

                changed = true; 
            }

            if(changed)
            {
                SelectedNesColorChanged.InvokeAsync(_selectedNesColor);

                switch (_selectedNesColorIndex)
                {
                    case 1:
                        Slot1ColorChanged.InvokeAsync(value);
                        break; 
                    case 2:
                        Slot2ColorChanged.InvokeAsync(value);
                        break; 
                    case 3:
                        Slot3ColorChanged.InvokeAsync(value);
                        break; 
                }
            }
        }
    }

    [Parameter]
    public EventCallback<NesColor?> SelectedNesColorChanged { get; set; }

    [Parameter]
    public NesColor? Slot1Color
    {
        get => Colors[0];
        set
        {
            GenericSet(0, value, Slot3ColorChanged);
        }
    }

    [Parameter]
    public EventCallback<NesColor?> Slot1ColorChanged { get; set; }

    [Parameter]
    public NesColor? Slot2Color
    {
        get => Colors[1];
        set
        {
            GenericSet(1, value, Slot3ColorChanged);
        }
    }

    [Parameter]
    public EventCallback<NesColor?> Slot2ColorChanged { get; set; }

    [Parameter]
    public NesColor? Slot3Color
    {
        get => Colors[2];
        set
        {
            GenericSet(2, value, Slot3ColorChanged); 
        }
    }

    [Parameter]
    public EventCallback<NesColor?> Slot3ColorChanged { get; set; }

    private void GenericSet(int colorIndex, NesColor value, EventCallback<NesColor> slotChangedCallback)
    {
        if (value != null && Colors?.Length == 3 && value != Colors[colorIndex])
        {
            Colors[colorIndex] = value;

            _ = slotChangedCallback.InvokeAsync(value);

            if (_selectedNesColorIndex == colorIndex + 1)
            {
                SelectedNesColor = value;
                _ = SelectedNesColorChanged.InvokeAsync(value);
            }
        }
    }

    private NesColor[] Colors { get; set; } = null; 

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true; 
        Colors = [new(NesColorsUtils.FullNesPalette[0]),
            new(NesColorsUtils.FullNesPalette[1]), new(NesColorsUtils.FullNesPalette[2])];

        _ = Slot1ColorChanged.InvokeAsync(Colors[0]);
        _ = Slot2ColorChanged.InvokeAsync(Colors[1]);
        _ = Slot3ColorChanged.InvokeAsync(Colors[2]);

        IsLoading = false; 
    }

    protected void OnPaletteColorClicked(NesColor? color, int index)
    {
        if (_selectedNesColorIndex != index)
        {
            _selectedNesColorIndex = index;
            _selectedNesColor = color;

            SelectedNesColorChanged.InvokeAsync(_selectedNesColor);
        }

        StateHasChanged(); 
    }
}
