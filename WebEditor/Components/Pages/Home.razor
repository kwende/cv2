@page "/"

@page "/sprite-editor"
@using Common
@using MudBlazor

@inject IJSRuntime _jsRuntime; 

<MudAppBar Color="Color.Primary" Elevation="1">
    <MudText Typo="Typo.h6">NES Sprite Editor</MudText>
</MudAppBar>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12 mb-4">
            <MudText Typo="Typo.h6">1) Upload CV2 ROM</MudText>
            <_RomUpload FileUpload="UploadFiles"></_RomUpload>
        </div>
    </div>
    <div class="row">
        <!-- Palette Panel -->
        <div class="col-md-5">
            <MudPaper Class="p-3">
                <MudText Typo="Typo.h6">2) Choose 4 colors from palette</MudText>

                <_NesColors @bind-SelectedColor="@SelectedNesColor"></_NesColors>

                <MudText Typo="Typo.h6" Class="mt-4">3) Choose from palette</MudText>

                <_ColorPalette @bind-Slot1Color="Slot1NesColor"
                               @bind-Slot2Color="Slot2NesColor"
                               @bind-Slot3Color="Slot3NesColor"
                               @bind-SelectedNesColor="@SelectedNesColor">
                </_ColorPalette>

            </MudPaper>
        </div>

        <!-- Canvas Panel -->
        <_SpriteEditor Sprite="@SelectedSprite" Slot1Color="Slot1NesColor"
                       Slot2Color="Slot2NesColor"
                       Slot3Color="Slot3NesColor"
                       SelectedNesColor="@SelectedNesColor">

        </_SpriteEditor>

    </div>
    <div class="row mt-4 d-flex">
        @for (int i = 0; i < SpriteCount; i++)
        {
            var canvasIndex = i; 
            <div style="width:64px; cursor:pointer">
                <canvas @onclick="() => OnCanvasClick(canvasIndex)" id="@($"thumb{i}")"
                    width="16" height="16" style="width:64px; height:64px; image-rendering:pixelated;"></canvas>
            </div>
        }
    </div>
</div>


@code {

    protected NesROM _rom = new NesROM();
    protected Sprite? SelectedSprite { get; set; } = null; 
    protected NesColor? SelectedNesColor { get; set; } = null; 

    protected NesColor? Slot1NesColor {get;set;} = null; 
    protected NesColor? Slot2NesColor {get;set;} = null;
    protected NesColor? Slot3NesColor { get; set; } = null;

    // Holds the four user-selected colors
    // protected string[] SelectedHexColorCodes = new string[3];
    // protected int[] SelectedNesColorCodes = new int[3]; 

    // 16×16 grid storing each pixel's color (hex code)
    // protected string[,] SpriteData = new string[16, 16];
    // protected int?[,] SpritePaletteIndices = new int?[16,16]; 

    protected int SpriteCount = 18; 

    protected MemoryStream _nesGameBytes = new MemoryStream(275_000);

    protected void OnCanvasClick(int canvasId)
    {

    }

    protected void LoadPalette(int[] palette)
    {
        // for(int a=0;a<3;a++)
        // {
        //     SelectedHexColorCodes[a] = NesColorsUtils.NesColorCodeToColor(palette[a]);
        //     SelectedNesColorCodes[a] = palette[a]; 
        // }
    }

    // protected async Task LoadSprite(Sprite sprite1)
    // {
    //     await Task.Run(()=>
    //     {
    //         for (int y = 0; y < sprite1.Height; y++)
    //         {
    //             for (int x = 0; x < sprite1.Width; x++)
    //             {
    //                 var index = y * sprite1.Width + x;

    //                 if(sprite1.SheetData[index] == 0)
    //                 {
    //                     SpriteData[x, y] = string.Empty;
    //                     SpritePaletteIndices[x,y] = null; 
    //                 }
    //                 else
    //                 {
    //                     var sheetValue = sprite1.SheetData[index] -1; 
    //                     SpriteData[x, y] = SelectedHexColorCodes[sheetValue];
    //                     SpritePaletteIndices[x, y] = sheetValue;
    //                 }
    //             }
    //         }
    //     }); 
    // }


    private IJSObjectReference _module; 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(_module == null)
        {
            _module = await _jsRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./Components/Pages/Home.razor.js");
        }
    }

    protected async Task UploadFiles(IBrowserFile file)
    {
        await file.OpenReadStream().CopyToAsync(_nesGameBytes);
        await _rom.Load(_nesGameBytes);

        var sheets = _rom.GetSpriteSheets(true);

        var simonSheet1 = sheets[1];

        // for demo of loading simon. 
        var sprite1 = simonSheet1.Sprites[1];
        var sprite2 = simonSheet1.Sprites[2];

        LoadPalette(Constants.SimonPalette); 

        var result = SpriteUtils.MergeSideBySide(sprite1, sprite2); 

        //await LoadSprite(result);

        
        // for (int i = 0; i < SpriteCount;i++)
        // {
        //     var spriteA = simonSheet1.Sprites[i*2+1];
        //     var spriteB = simonSheet1.Sprites[i*2+2];
        //     var merged = SpriteUtils.MergeSideBySide(spriteA, spriteB); 

        //     var spriteImage = await SpriteUtils.PaintSprite(merged, SelectedHexColorCodes);
        //     await _module.InvokeVoidAsync("drawSpriteOnCanvas", $"thumb{i}", spriteImage);
        // }

    }
}



<style>
    /* Palette grid: 16 columns */
    .palette-grid {
        display: grid;
        grid-template-columns: repeat(16, 24px);
        grid-gap: 4px;
    }

    .color-cell {
        width: 24px;
        height: 24px;
        border: 1px solid #444;
        cursor: pointer;
    }

    .no-select {
        /* Prevent any selection or caret showing up */
        user-select: none; /* standard */
        -webkit-user-select: none; /* Safari/Chrome */
        -ms-user-select: none; /* IE/Edge */
        /* Hide the blinking caret if focus does land there */
        caret-color: transparent;
        /* Remove the focus outline so nothing shows when you click */
        outline: none;
    }

    /* Selected palette slots */
    .selected-colors .selected-color-cell {
        width: 40px;
        height: 40px;
        border: 1px solid #444;
        margin-right: 8px;
        cursor: pointer;
    }


    /* Sprite canvas: 16×16 pixels */
    .sprite-canvas {
        display: grid;
        grid-template-columns: repeat(16, 20px);
        grid-template-rows: repeat(16, 20px);
    }

    .pixel {
        width: 20px;
        height: 20px;
        border: 1px solid #ccc;
        cursor: pointer;
    }

    .background {
        background: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' preserveAspectRatio='none' viewBox='0 0 100 100'><path d='M100 0 L0 100 ' stroke='black' stroke-width='1'/><path d='M0 0 L100 100 ' stroke='black' stroke-width='1'/></svg>");
        background-repeat: no-repeat;
        background-position: center center;
        background-size: 100% 100%, auto;
    }
</style>